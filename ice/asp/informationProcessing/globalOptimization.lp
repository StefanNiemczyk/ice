%%%%--------------------------------------------------------------------------------------
%%%%
%%%% Global optimization
%%%%
%%%% Implements a global optimization and propagation of QoS metadata  
%%%%
%%%%--------------------------------------------------------------------------------------
#program query(k,maxHopCount,maxStepCount).

heuristic(k,SYSTEM,NODE,0) :-
	sourceNode(SYSTEM,NODE,_).

heuristic(k,SYSTEM,NODE,0) :-
	nodeTemplate(SYSTEM,NODE,_).

heuristic(k,SYSTEM,NODE,0) :-
	iro(SYSTEM,NODE,_,_).

heuristic(k,SYSTEM,NODE,0) :-
	mapNodeTemplate(SYSTEM,NODE,_).

% computing stream QoS metadata 
%fix
metadataStream(k,stream(METADATA,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,ENTITY2),STEP),FIX_VALUE) :- 
	node(k,SYSTEM,IRO,ENTITY,ENTITY2), 
	ENTITY2 != none,
	ENTITY2 != any,
	output(SYSTEM,IRO,SCOPE,REP,ENTITY2), 
	stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,ENTITY2),STEP), 
	metadataNode(METADATA,SYSTEM,IRO,fix,FIX_VALUE,MOD_VALUE).
metadataStream(k,METADATA,stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,none),STEP),FIX_VALUE) :- 
	node(k,SYSTEM,IRO,ENTITY,ENTITY2), 
	output(SYSTEM,IRO,SCOPE,REP,none), 
	stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,none),STEP), 
	metadataNode(METADATA,SYSTEM,IRO,fix,FIX_VALUE,MOD_VALUE).
metadataStream(k,METADATA,stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,ENTITY2),STEP),FIX_VALUE) :- 
	node(k,SYSTEM,IRO,ENTITY,ENTITY2), 
	output(SYSTEM,IRO,SCOPE,REP,any), 
	stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,ENTITY2),STEP), 
	metadataNode(METADATA,SYSTEM,IRO,fix,FIX_VALUE,MOD_VALUE).

%min
metadataStream(k,METADATA,stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,ENTITY2),STEP),VALUE+FIX_VALUE+MOD_VALUE*COUNT) :- 
	node(k,SYSTEM,IRO,ENTITY,ENTITY2), 
	output(SYSTEM,IRO,SCOPE,REP,ENTITY2), 
	ENTITY2 != none,
	ENTITY2 != any,
	stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,ENTITY2),STEP), 
	metadataNode(METADATA,SYSTEM,IRO,min,FIX_VALUE,MOD_VALUE),
	VALUE = #min{D,STEP2,PROVIDER,SOURCE,INFO : 
		connectToNode(node(k,SYSTEM,IRO,ENTITY,ENTITY2), stream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP2)),
		metadataStream(k,METADATA,stream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP2),D), 
		IRO != PROVIDER, 
		STEP2 < STEP}, 
	nodeMeta(node(k,SYSTEM,IRO,ENTITY,ENTITY2), STEP-1, COUNT),
	COUNT > 0.

metadataStream(k,METADATA,stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,none),STEP),VALUE+FIX_VALUE+MOD_VALUE*COUNT) :- 
	node(k,SYSTEM,IRO,ENTITY,ENTITY2), 
	output(SYSTEM,IRO,SCOPE,REP,none), 
	stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,none),STEP), 
	metadataNode(METADATA,SYSTEM,IRO,min,FIX_VALUE,MOD_VALUE),
	VALUE = #min{D,STEP2,PROVIDER,SOURCE,INFO : 
		connectToNode(node(k,SYSTEM,IRO,ENTITY,ENTITY2), stream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP2)),
		metadataStream(k,METADATA,stream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP2),D), 
		IRO != PROVIDER, 
		STEP2 < STEP}, 
	nodeMeta(node(k,SYSTEM,IRO,ENTITY,ENTITY2), STEP-1, COUNT),
	COUNT > 0.

metadataStream(k,METADATA,stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,ENTITY2),STEP),VALUE+FIX_VALUE+MOD_VALUE*COUNT) :- 
	node(k,SYSTEM,IRO,ENTITY,ENTITY2), 
	output(SYSTEM,IRO,SCOPE,REP,any), 
	stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,ENTITY2),STEP), 
	metadataNode(METADATA,SYSTEM,IRO,min,FIX_VALUE,MOD_VALUE),
	VALUE = #min{D,STEP2,PROVIDER,SOURCE,INFO : 
		connectToNode(node(k,SYSTEM,IRO,ENTITY,ENTITY2), stream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP2)),
		metadataStream(k,METADATA,stream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP2),D), 
		IRO != PROVIDER, 
		STEP2 < STEP}, 
	nodeMeta(node(k,SYSTEM,IRO,ENTITY,ENTITY2), STEP-1, COUNT),
	COUNT > 0.


%avg
metadataStream(k,METADATA,stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,ENTITY2),STEP),VALUE/COUNT+FIX_VALUE+MOD_VALUE*COUNT) :- 
	node(k,SYSTEM,IRO,ENTITY,ENTITY2), 
	output(SYSTEM,IRO,SCOPE,REP,ENTITY2), 
	ENTITY2 != none,
	ENTITY2 != any,
	stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,ENTITY2),STEP), 
	metadataNode(METADATA,SYSTEM,IRO,avg,FIX_VALUE,MOD_VALUE),
	VALUE = #sum{D,STEP2,PROVIDER,SOURCE,INFO : 
		connectToNode(node(k,SYSTEM,IRO,ENTITY,ENTITY2), stream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP2)),
		metadataStream(k,METADATA,stream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP2),D), 
		IRO != PROVIDER, 
		STEP2 < STEP}, 
	nodeMeta(node(k,SYSTEM,IRO,ENTITY,ENTITY2), STEP-1, COUNT),
	COUNT > 0.

metadataStream(k,METADATA,stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,none),STEP),VALUE/COUNT+FIX_VALUE+MOD_VALUE*COUNT) :- 
	node(k,SYSTEM,IRO,ENTITY,ENTITY2), 
	output(SYSTEM,IRO,SCOPE,REP,none), 
	stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,none),STEP), 
	metadataNode(METADATA,SYSTEM,IRO,avg,FIX_VALUE,MOD_VALUE),
	VALUE = #sum{D,STEP2,PROVIDER,SOURCE,INFO : 
		connectToNode(node(k,SYSTEM,IRO,ENTITY,ENTITY2), stream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP2)),
		metadataStream(k,METADATA,stream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP2),D), 
		IRO != PROVIDER, 
		STEP2 < STEP}, 
	nodeMeta(node(k,SYSTEM,IRO,ENTITY,ENTITY2), STEP-1, COUNT),
	COUNT > 0.

metadataStream(k,METADATA,stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,ENTITY2),STEP),VALUE/COUNT+FIX_VALUE+MOD_VALUE*COUNT) :- 
	node(k,SYSTEM,IRO,ENTITY,ENTITY2), 
	output(SYSTEM,IRO,SCOPE,REP,any), 
	stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,ENTITY2),STEP), 
	metadataNode(METADATA,SYSTEM,IRO,avg,FIX_VALUE,MOD_VALUE),
	VALUE = #sum{D,STEP2,PROVIDER,SOURCE,INFO : 
		connectToNode(node(k,SYSTEM,IRO,ENTITY,ENTITY2), stream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP2)),
		metadataStream(k,METADATA,stream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP2),D), 
		IRO != PROVIDER, 
		STEP2 < STEP}, 
	nodeMeta(node(k,SYSTEM,IRO,ENTITY,ENTITY2), STEP-1, COUNT),
	COUNT > 0.


%max

% slow
%metadataStream(k,METADATA,stream(k,SYSTEM,NODE,SYSTEM,INFO,STEP),VALUE+FIX_VALUE+MOD_VALUE*COUNT) :- 
%	node(k,SYSTEM,NODE,ENTITY,ENTITY2), 
%	tstream(k,SYSTEM,tnode(k,SYSTEM,NODE,ENTITY,ENTITY2),INFO,_),
%	stream(k,SYSTEM,NODE,SYSTEM,INFO,STEP), 
%	metadataNode(METADATA,SYSTEM,NODE,max,FIX_VALUE,MOD_VALUE),
%	VALUE = #max{D,STEP2,PROVIDER,SOURCE,INFO2 : 
%		connectToNode(node(k,SYSTEM,NODE,ENTITY,ENTITY2), stream(k,SYSTEM,PROVIDER,SOURCE,INFO2,STEP2)),
%		metadataStream(k,METADATA,stream(k,SYSTEM,PROVIDER,SOURCE,INFO2,STEP2),D), 
%		NODE != PROVIDER, 
%		STEP2 < STEP}, 
%	nodeMeta(node(k,SYSTEM,NODE,ENTITY,ENTITY2), STEP-1, COUNT),
%	COUNT > 0.


metadataStream(k,METADATA,stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,ENTITY2),STEP),VALUE+FIX_VALUE+MOD_VALUE*COUNT) :- 
	node(k,SYSTEM,IRO,ENTITY,ENTITY2), 
	output(SYSTEM,IRO,SCOPE,REP,ENTITY2), 
	ENTITY2 != none,
	ENTITY2 != any,
	stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,ENTITY2),STEP), 
	metadataNode(METADATA,SYSTEM,IRO,max,FIX_VALUE,MOD_VALUE),
	VALUE = #max{D,STEP2,PROVIDER,SOURCE,INFO : 
		connectToNode(node(k,SYSTEM,IRO,ENTITY,ENTITY2), stream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP2)),
		metadataStream(k,METADATA,stream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP2),D), 
		IRO != PROVIDER, 
		STEP2 < STEP}, 
	nodeMeta(node(k,SYSTEM,IRO,ENTITY,ENTITY2), STEP-1, COUNT),
	COUNT > 0.

metadataStream(k,METADATA,stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,none),STEP),VALUE+FIX_VALUE+MOD_VALUE*COUNT) :- 
	node(k,SYSTEM,IRO,ENTITY,ENTITY2), 
	output(SYSTEM,IRO,SCOPE,REP,none), 
	stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,none),STEP), 
	metadataNode(METADATA,SYSTEM,IRO,max,FIX_VALUE,MOD_VALUE),
	VALUE = #max{D,STEP2,PROVIDER,SOURCE,INFO : 
		connectToNode(node(k,SYSTEM,IRO,ENTITY,ENTITY2), stream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP2)),
		metadataStream(k,METADATA,stream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP2),D),
		IRO != PROVIDER, 
		STEP2 < STEP}, 
	nodeMeta(node(k,SYSTEM,IRO,ENTITY,ENTITY2), STEP-1, COUNT),
	COUNT > 0.

metadataStream(k,METADATA,stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,ENTITY2),STEP),VALUE+FIX_VALUE+MOD_VALUE*COUNT) :- 
	node(k,SYSTEM,IRO,ENTITY,ENTITY2), 
	output(SYSTEM,IRO,SCOPE,REP,any), 
	stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,ENTITY2),STEP), 
	metadataNode(METADATA,SYSTEM,IRO,max,FIX_VALUE,MOD_VALUE),
	VALUE = #max{D,STEP2,PROVIDER,SOURCE,INFO : 
		connectToNode(node(k,SYSTEM,IRO,ENTITY,ENTITY2), stream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP2)),
		metadataStream(k,METADATA,stream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP2),D), 
		IRO != PROVIDER, 
		STEP2 < STEP}, 
	nodeMeta(node(k,SYSTEM,IRO,ENTITY,ENTITY2), STEP-1, COUNT),
	COUNT > 0.


%no input
metadataStream(k,METADATA,stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,ENTITY2),STEP),FIX_VALUE) :- 
	node(k,SYSTEM,IRO,ENTITY,ENTITY2), 
	output(SYSTEM,IRO,SCOPE,REP,ENTITY2), 
	ENTITY2 != none,
	ENTITY2 != any,
	stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,ENTITY2),STEP), 
	metadataNode(METADATA,SYSTEM,IRO,TYPE,FIX_VALUE,MOD_VALUE),
	TYPE != fix,
	nodeMeta(node(k,SYSTEM,IRO,ENTITY,ENTITY2), STEP-1, 0).

metadataStream(k,METADATA,stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,none),STEP),FIX_VALUE) :- 
	node(k,SYSTEM,IRO,ENTITY,ENTITY2), 
	output(SYSTEM,IRO,SCOPE,REP,none), 
	stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,none),STEP), 
	metadataNode(METADATA,SYSTEM,IRO,TYPE,FIX_VALUE,MOD_VALUE),
	TYPE != fix,
	nodeMeta(node(k,SYSTEM,IRO,ENTITY,ENTITY2), STEP-1, 0).

metadataStream(k,METADATA,stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,ENTITY2),STEP),FIX_VALUE) :- 
	node(k,SYSTEM,IRO,ENTITY,ENTITY2), 
	output(SYSTEM,IRO,SCOPE,REP,any), 
	stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,ENTITY2),STEP), 
	metadataNode(METADATA,SYSTEM,IRO,TYPE,FIX_VALUE,MOD_VALUE),
	TYPE != fix,
	nodeMeta(node(k,SYSTEM,IRO,ENTITY,ENTITY2), STEP-1, 0).


%% Speed up
:- metadataStream(k,METADATA,STREAM,VALUE), 
   metadataStream(k,METADATA,STREAM,VALUE2),
   VALUE != VALUE2.


%% Transfer of streams
% computing QoS metadata	
metadataStream(k,METADATA,stream(k,SYSTEM_TARGET,PROVIDER,SOURCE,INFO,STEP+1),VALUE) :- 
	streamTransfer(k,SYSTEM_TARGET,stream(k,SYSTEM_SOURCE,PROVIDER,SOURCE,INFO,STEP),TRANSFER_DELAY,TRANSFER_COST,_), 
	metadataStream(k,METADATA,stream(k,SYSTEM_SOURCE,PROVIDER,SOURCE,INFO,STEP),VALUE), 
	METADATA != delay.	

% computing delay
metadataStream(k,delay,stream(k,SYSTEM_TARGET,PROVIDER,SOURCE,INFO,STEP+1),TRANSFER_DELAY+DELAY) :-
	streamTransfer(k,SYSTEM_TARGET,stream(k,SYSTEM_SOURCE,PROVIDER,SOURCE,INFO,STEP),TRANSFER_DELAY,TRANSFER_COST,_), 
	metadataStream(k,delay,stream(k,SYSTEM_SOURCE,PROVIDER,SOURCE,INFO,STEP),DELAY).


%% Computing map QoS metadata
% fix
metadataMap(k,METADATA,map(k,SYSTEM,NODE,ENTITY_TYPE,SCOPE,REP,ENTITY2,STEP),FIX_VALUE) :- 
	map(k,SYSTEM,NODE,ENTITY_TYPE,SCOPE,REP,ENTITY2,STEP),
	metadataMap(METADATA,SYSTEM,NODE,fix,FIX_VALUE,MOD_VALUE).

% min
metadataMap(k,METADATA,map(k,SYSTEM,NODE,ENTITY_TYPE,SCOPE,REP,ENTITY2,STEP),FIX_VALUE+VALUE+COUNT*MOD_VALUE) :- 
	map(k,SYSTEM,NODE,ENTITY_TYPE,SCOPE,REP,ENTITY2,STEP), 
	metadataMap(METADATA,SYSTEM,NODE,min,FIX_VALUE,MOD_VALUE),
	VALUE = #min{D,STEP2,PROVIDER,SOURCE,INFO : 
		connectToMap(mapNode(k,SYSTEM,NODE,ENTITY_TYPE,ENTITY2), stream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP2)),
		metadataStream(k,METADATA,stream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP2),D), 
		NODE != PROVIDER, 
		STEP2 < STEP}, 
	mapMeta(mapNode(k,SYSTEM,NODE,ENTITY_TYPE,ENTITY2),STEP-1,COUNT),
	COUNT != 0.

%avg
metadataMap(k,METADATA,map(k,SYSTEM,NODE,ENTITY_TYPE,SCOPE,REP,ENTITY2,STEP),FIX_VALUE+VALUE/COUNT+COUNT*MOD_VALUE) :- 
	map(k,SYSTEM,NODE,ENTITY_TYPE,SCOPE,REP,ENTITY2,STEP), 
	metadataMap(METADATA,SYSTEM,NODE,avg,FIX_VALUE,MOD_VALUE),
	VALUE = #sum{D,STEP2,PROVIDER,SOURCE,INFO : 
		connectToMap(mapNode(k,SYSTEM,NODE,ENTITY_TYPE,ENTITY2), stream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP2)),
		metadataStream(k,METADATA,stream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP2),D), 
		NODE != PROVIDER, 
		STEP2 < STEP}, 
	mapMeta(mapNode(k,SYSTEM,NODE,ENTITY_TYPE,ENTITY2),STEP-1,COUNT),
	COUNT != 0.

%max
metadataMap(k,METADATA,map(k,SYSTEM,NODE,ENTITY_TYPE,SCOPE,REP,ENTITY2,STEP),FIX_VALUE+VALUE+COUNT*MOD_VALUE) :- 
	map(k,SYSTEM,NODE,ENTITY_TYPE,SCOPE,REP,ENTITY2,STEP), 
	metadataMap(METADATA,SYSTEM,NODE,max,FIX_VALUE,MOD_VALUE),
	VALUE = #max{D,STEP2,PROVIDER,SOURCE,INFO : 
		connectToMap(mapNode(k,SYSTEM,NODE,ENTITY_TYPE,ENTITY2), stream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP2)),
		metadataStream(k,METADATA,stream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP2),D), 
		NODE != PROVIDER, 
		STEP2 < STEP}, 
	mapMeta(mapNode(k,SYSTEM,NODE,ENTITY_TYPE,ENTITY2),STEP-1,COUNT),
	COUNT != 0.

%no input
metadataMap(k,METADATA,map(k,SYSTEM,NODE,ENTITY_TYPE,SCOPE,REP,ENTITY2,STEP),FIX_VALUE) :- 
	map(k,SYSTEM,NODE,ENTITY_TYPE,SCOPE,REP,ENTITY2,STEP), 
	metadataMap(METADATA,SYSTEM,NODE,TYPE,FIX_VALUE,MOD_VALUE),
	mapMeta(mapNode(k,SYSTEM,NODE,ENTITY_TYPE,ENTITY2),STEP-1,0),
        TYPE != fix.


% checking stream QoS metadata

:~ requiredStream(SYSTEM,INFO), 
   selectedStream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP),
   requiredMetadata(METADATA,SYSTEM,INFO,REQUIRED_VALUE), 
   metadataStream(k,METADATA,stream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP),VALUE), 
   metadata(METADATA,maximize),
   REQUIRED_VALUE < VALUE,
   query(k). [1@4,requiredStream]
:~ requiredStream(SYSTEM,INFO), 
   selectedStream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP),
   requiredMetadata(METADATA,SYSTEM,INFO,REQUIRED_VALUE), 
   metadataStream(k,METADATA,stream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP),VALUE),
   metadata(METADATA,minimize), 
   REQUIRED_VALUE > VALUE,
   query(k). [1@4,requiredStream]


% checking map QoS parameters
:~ selectedMap(k,SYSTEM,NODE,ENTITY_TYPE,SCOPE,REPRESENTATION,ENTITY2,STEP),
   requiredMetadata(METADATA,SYSTEM,ENTITY_TYPE,SCOPE,REP,ENTITY2,REQUIRED_VALUE), 
   metadataMap(k,METADATA,map(k,SYSTEM,NODE,ENTITY_TYPE,SCOPE,REP,ENTITY2,STEP),VALUE),
   metadata(METADATA,maximize),
   REQUIRED_VALUE < VALUE,
   query(k). [1@4,requiredStream]
:~ selectedMap(k,SYSTEM,NODE,ENTITY_TYPE,SCOPE,REPRESENTATION,ENTITY2,STEP),
   requiredMetadata(METADATA,SYSTEM,ENTITY_TYPE,SCOPE,REP,ENTITY2,REQUIRED_VALUE), 
   metadataMap(k,METADATA,map(k,SYSTEM,NODE,ENTITY_TYPE,SCOPE,REP,ENTITY2,STEP),VALUE),
   metadata(METADATA,minimize), 
   REQUIRED_VALUE > VALUE,
   query(k). [1@4,requiredStream]


% optimizing Stream QoS metadata
#minimize { VALUE@priorityDelay,INFO,SYSTEM,PROVIDER,SOURCE,STEP : selectedStream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP), metadataStream(k,delay,stream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP),VALUE), query(k) }.
#maximize { VALUE@priorityAccuracy,INFO,SYSTEM,PROVIDER,SOURCE,STEP : selectedStream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP), metadataStream(k,accuracy,stream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP),VALUE), query(k) }.



% optimizing Map QoS metadata
#minimize { VALUE@priorityDelay,SYSTEM,NODE,ENTITY_TYPE,SCOPE,REP,ENTITY2,STEP : selectedMap(k,SYSTEM,NODE,ENTITY_TYPE,SCOPE,REP,ENTITY2,STEP), 
		metadataMap(k,delay,map(k,SYSTEM,NODE,ENTITY_TYPE,SCOPE,REP,ENTITY2,STEP),VALUE), query(k) }.
#maximize { VALUE@priorityAccuracy,SYSTEM,NODE,ENTITY_TYPE,SCOPE,REP,ENTITY2,STEP : selectedMap(k,SYSTEM,NODE,ENTITY_TYPE,SCOPE,REP,ENTITY2,STEP), 
		metadataMap(k,accuracy,map(k,SYSTEM,NODE,ENTITY_TYPE,SCOPE,REP,ENTITY2,STEP),VALUE), query(k) }.








