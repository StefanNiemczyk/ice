%%%%--------------------------------------------------------------------------------------
%%%%
%%%% Local optimization 
%%%% 
%%%% Implements a simple local search based on penalties for not optimal streams
%%%%
%%%%--------------------------------------------------------------------------------------
#program query(k,maxHopCount,maxStepCount).

%% heuristic of tstream QoS
% minimize
heuristic(k,stream,SYSTEM,tnode(k,SYSTEM,NODE,ENTITY,ENTITY2),INFO,METADATA,SUM) :-
	metadata(information,METADATA,minimize),
	tstream(k,SYSTEM,tnode(k,SYSTEM,NODE,ENTITY,ENTITY2),INFO),
	metadataOutput(METADATA,SYSTEM,NODE,TYPE,FIX_VALUE,MOD_VALUE),
	nodeCount(k,SYSTEM,NODE,MIN,MAX),
	SUM = FIX_VALUE+(MAX-MIN+1)*MOD_VALUE.

heuristic(k,stream,SYSTEM,tnode(k,SYSTEM,NODE,ENTITY,ENTITY2),INFO,METADATA,SUM) :-
	metadata(stream,METADATA,minimize),
	tstream(k,SYSTEM,tnode(k,SYSTEM,NODE,ENTITY,ENTITY2),INFO),
	metadataOutput(METADATA,SYSTEM,NODE,TYPE,FIX_VALUE,MOD_VALUE),
	nodeCount(k,SYSTEM,NODE,MIN,MAX),
	SUM = FIX_VALUE+(MAX-MIN+1)*MOD_VALUE.

% maximize
heuristic(k,stream,SYSTEM,tnode(k,SYSTEM,NODE,ENTITY,ENTITY2),INFO,METADATA,SUM) :-
	metadata(information,METADATA,maximize),
	tstream(k,SYSTEM,tnode(k,SYSTEM,NODE,ENTITY,ENTITY2),INFO),
	metadataOutput(METADATA,SYSTEM,NODE,TYPE,FIX_VALUE,MOD_VALUE),
	nodeCount(k,SYSTEM,NODE,MIN,MAX),
	SUM = FIX_VALUE+(MAX-MIN+1)*MOD_VALUE.

heuristic(k,stream,SYSTEM,tnode(k,SYSTEM,NODE,ENTITY,ENTITY2),INFO,METADATA,SUM) :-
	metadata(stream,METADATA,maximize),
	tstream(k,SYSTEM,tnode(k,SYSTEM,NODE,ENTITY,ENTITY2),INFO),
	metadataOutput(METADATA,SYSTEM,NODE,TYPE,FIX_VALUE,MOD_VALUE),
	nodeCount(k,SYSTEM2,NODE,MIN,MAX),
	SUM = FIX_VALUE+(MAX-MIN+1)*MOD_VALUE.

% transfer
heuristic(k,stream,SYSTEM_TARGET,tnode(k,SYSTEM_SOURCE,NODE,ENTITY,ENTITY2),INFO,METADATA,VALUE+VALUE_PROCESSING) :-
	metadata(information,METADATA,_),
	SYSTEM_TARGET != SYSTEM_SOURCE,
	tstream(k,SYSTEM_TARGET,tnode(k,SYSTEM_SOURCE,NODE,ENTITY,ENTITY2),INFO),
	heuristic(k,stream,SYSTEM_SOURCE,tnode(k,SYSTEM_SOURCE,NODE,ENTITY,ENTITY2),INFO,METADATA,VALUE),
	metadataOutput(METADATA,SYSTEM_SOURCE,SYSTEM_TARGET,VALUE_PROCESSING).

heuristic(k,stream,SYSTEM_TARGET,tnode(k,SYSTEM_SOURCE,NODE,ENTITY,ENTITY2),INFO,METADATA,VALUE) :-
	metadata(information,METADATA,_),
	SYSTEM_TARGET != SYSTEM_SOURCE,
	tstream(k,SYSTEM_TARGET,tnode(k,SYSTEM_SOURCE,NODE,ENTITY,ENTITY2),INFO),
	heuristic(k,stream,SYSTEM_SOURCE,tnode(k,SYSTEM_SOURCE,NODE,ENTITY,ENTITY2),INFO,METADATA,VALUE),
	not metadataOutput(METADATA,SYSTEM_SOURCE,SYSTEM_TARGET,_).


heuristic(k,stream,SYSTEM_TARGET,tnode(k,SYSTEM_SOURCE,NODE,ENTITY,ENTITY2),INFO,METADATA,VALUE+VALUE_PROCESSING) :-
	metadata(stream,METADATA,_),
	SYSTEM_TARGET != SYSTEM_SOURCE,
	tstream(k,SYSTEM_TARGET,tnode(k,SYSTEM_SOURCE,NODE,ENTITY,ENTITY2),INFO),
	heuristic(k,stream,SYSTEM_SOURCE,tnode(k,SYSTEM_SOURCE,NODE,ENTITY,ENTITY2),INFO,METADATA,VALUE),
	metadataOutput(METADATA,SYSTEM_SOURCE,SYSTEM_TARGET,VALUE_PROCESSING).

heuristic(k,stream,SYSTEM_TARGET,tnode(k,SYSTEM_SOURCE,NODE,ENTITY,ENTITY2),INFO,METADATA,VALUE) :-
	metadata(stream,METADATA,_),
	SYSTEM_TARGET != SYSTEM_SOURCE,
	tstream(k,SYSTEM_TARGET,tnode(k,SYSTEM_SOURCE,NODE,ENTITY,ENTITY2),INFO),
	heuristic(k,stream,SYSTEM_SOURCE,tnode(k,SYSTEM_SOURCE,NODE,ENTITY,ENTITY2),INFO,METADATA,VALUE),
	not metadataOutput(METADATA,SYSTEM_SOURCE,SYSTEM_TARGET,_).


%% heuristic of tmap QoS
% minimize
heuristic(k,map,SYSTEM,tmapNode(k,SYSTEM,NODE,ENTITY_TYPE,ENTITY2),INFO_TYPE,METADATA,SUM) :-
	metadata(information,METADATA,minimize),
	tmap(k,SYSTEM,tmapNode(k,SYSTEM,NODE,ENTITY_TYPE,ENTITY2),INFO_TYPE),
	metadataOutput(METADATA,SYSTEM,NODE,TYPE,FIX_VALUE,MOD_VALUE),
	mapCount(k,SYSTEM,NODE,MIN,MAX),
	SUM = FIX_VALUE+(MAX-MIN+1)*MOD_VALUE.

heuristic(k,map,SYSTEM,tmapNode(k,SYSTEM,NODE,ENTITY_TYPE,ENTITY2),INFO_TYPE,METADATA,SUM) :-
	metadata(map,METADATA,minimize),
	tmap(k,SYSTEM,tmapNode(k,SYSTEM,NODE,ENTITY_TYPE,ENTITY2),INFO_TYPE),
	metadataOutput(METADATA,SYSTEM,NODE,TYPE,FIX_VALUE,MOD_VALUE),
	mapCount(k,SYSTEM,NODE,MIN,MAX),
	SUM = FIX_VALUE+(MAX-MIN+1)*MOD_VALUE.

% maximize
heuristic(k,map,SYSTEM,tmapNode(k,SYSTEM,NODE,ENTITY_TYPE,ENTITY2),INFO_TYPE,METADATA,SUM) :-
	metadata(information,METADATA,maximize),
	tmap(k,SYSTEM,tmapNode(k,SYSTEM,NODE,ENTITY_TYPE,ENTITY2),INFO_TYPE),
	metadataOutput(METADATA,SYSTEM,NODE,TYPE,FIX_VALUE,MOD_VALUE),
	mapCount(k,SYSTEM,NODE,MIN,MAX),
	SUM = FIX_VALUE+(MAX-MIN+1)*MOD_VALUE.

heuristic(k,map,SYSTEM,tmapNode(k,SYSTEM,NODE,ENTITY_TYPE,ENTITY2),INFO_TYPE,METADATA,SUM) :-
	metadata(map,METADATA,maximize),
	tmap(k,SYSTEM,tmapNode(k,SYSTEM,NODE,ENTITY_TYPE,ENTITY2),INFO_TYPE),
	metadataOutput(METADATA,SYSTEM,NODE,TYPE,FIX_VALUE,MOD_VALUE),
	mapCount(k,SYSTEM,NODE,MIN,MAX),
	SUM = FIX_VALUE+(MAX-MIN+1)*MOD_VALUE.

% transfer
heuristic(k,map,SYSTEM_TARGET,tmapNode(k,SYSTEM_SOURCE,NODE,ENTITY_TYPE,ENTITY2),INFO_TYPE,METADATA,VALUE+VALUE_PROCESSING) :-
	metadata(information,METADATA,_),
	SYSTEM_TARGET != SYSTEM_SOURCE,
	tmap(k,SYSTEM_TARGET,tmapNode(k,SYSTEM_SOURCE,NODE,ENTITY_TYPE,ENTITY2),INFO_TYPE),
	heuristic(k,map,SYSTEM_SOURCE,tmapNode(k,SYSTEM_SOURCE,NODE,ENTITY_TYPE,ENTITY2),INFO_TYPE,METADATA,VALUE),
	metadataOutput(METADATA,SYSTEM_SOURCE,SYSTEM_TARGET,VALUE_PROCESSING).

heuristic(k,map,SYSTEM_TARGET,tmapNode(k,SYSTEM_SOURCE,NODE,ENTITY_TYPE,ENTITY2),INFO_TYPE,METADATA,VALUE) :-
	metadata(information,METADATA,_),
	SYSTEM_TARGET != SYSTEM_SOURCE,
	tmap(k,SYSTEM_TARGET,tmapNode(k,SYSTEM_SOURCE,NODE,ENTITY_TYPE,ENTITY2),INFO_TYPE),
	heuristic(k,map,SYSTEM_SOURCE,tmapNode(k,SYSTEM_SOURCE,NODE,ENTITY_TYPE,ENTITY2),INFO_TYPE,METADATA,VALUE),
	not metadataOutput(METADATA,SYSTEM_SOURCE,SYSTEM_TARGET,_).


heuristic(k,map,SYSTEM_TARGET,tmapNode(k,SYSTEM_SOURCE,NODE,ENTITY_TYPE,ENTITY2),INFO_TYPE,METADATA,VALUE+VALUE_PROCESSING) :-
	metadata(map,METADATA,_),
	SYSTEM_TARGET != SYSTEM_SOURCE,
	tmap(k,SYSTEM_TARGET,tmapNode(k,SYSTEM_SOURCE,NODE,ENTITY_TYPE,ENTITY2),INFO_TYPE),
	heuristic(k,map,SYSTEM_SOURCE,tmapNode(k,SYSTEM_SOURCE,NODE,ENTITY_TYPE,ENTITY2),INFO_TYPE,METADATA,VALUE),
	metadataOutput(METADATA,SYSTEM_SOURCE,SYSTEM_TARGET,VALUE_PROCESSING).

heuristic(k,map,SYSTEM_TARGET,tmapNode(k,SYSTEM_SOURCE,NODE,ENTITY_TYPE,ENTITY2),INFO_TYPE,METADATA,VALUE) :-
	metadata(map,METADATA,_),
	SYSTEM_TARGET != SYSTEM_SOURCE,
	tmap(k,SYSTEM_TARGET,tmapNode(k,SYSTEM_SOURCE,NODE,ENTITY_TYPE,ENTITY2),INFO_TYPE),
	heuristic(k,map,SYSTEM_SOURCE,tmapNode(k,SYSTEM_SOURCE,NODE,ENTITY_TYPE,ENTITY2),INFO_TYPE,METADATA,VALUE),
	not metadataOutput(METADATA,SYSTEM_SOURCE,SYSTEM_TARGET,_).



%% ------------------------------------------------------------------------------------------

%no input
%*
metadataStream(k,METADATA,stream(k,SYSTEM,NODE,SYSTEM,INFO,STEP),VALUE) :- 
	stream(k,SYSTEM,NODE,SYSTEM,INFO,STEP), 
	heuristic(k,stream,SYSTEM,tnode(k,SYSTEM,NODE,ENTITY,ENTITY2),INFO,METADATA,VALUE),
	metadataOutput(METADATA,SYSTEM,NODE,TYPE,FIX_VALUE,MOD_VALUE),
	nodeMeta(node(k,SYSTEM,NODE,ENTITY,ENTITY2), STEP-1, 0).
*%
% min
%*
metadataStream(k,METADATA,stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,ENTITY2),STEP),VALUE+FIX_VALUE+MOD_VALUE*COUNT) :- 
	node(k,SYSTEM,IRO,ENTITY,ENTITY2), 
	output(SYSTEM,IRO,SCOPE,REP,ENTITY2), 
	ENTITY2 != none,
	ENTITY2 != any,
	stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,ENTITY2),STEP), 
	metadataOutput(METADATA,SYSTEM,IRO,min,FIX_VALUE,MOD_VALUE),
	VALUE = #min{D,STEP2,PROVIDER,SOURCE,INFO : 
		connectToNode(node(k,SYSTEM,IRO,ENTITY,ENTITY2), stream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP2)),
		heuristic(k,stream,SYSTEM,tnode(k,SOURCE,PROVIDER,_,_),INFO,METADATA,D),
		IRO != PROVIDER, 
		STEP2 < STEP}, 
	nodeMeta(node(k,SYSTEM,IRO,ENTITY,ENTITY2), STEP-1, COUNT),
	COUNT > 0.

metadataStream(k,METADATA,stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,none),STEP),VALUE+FIX_VALUE+MOD_VALUE*COUNT) :- 
	node(k,SYSTEM,IRO,ENTITY,ENTITY2), 
	output(SYSTEM,IRO,SCOPE,REP,none), 
	stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,none),STEP), 
	metadataOutput(METADATA,SYSTEM,IRO,min,FIX_VALUE,MOD_VALUE),
	VALUE = #min{D,STEP2,PROVIDER,SOURCE,INFO : 
		connectToNode(node(k,SYSTEM,IRO,ENTITY,ENTITY2), stream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP2)),
		heuristic(k,stream,SYSTEM,tnode(k,SOURCE,PROVIDER,_,_),INFO,METADATA,D),
		IRO != PROVIDER, 
		STEP2 < STEP}, 
	nodeMeta(node(k,SYSTEM,IRO,ENTITY,ENTITY2), STEP-1, COUNT),
	COUNT > 0.

metadataStream(k,METADATA,stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,ENTITY2),STEP),VALUE+FIX_VALUE+MOD_VALUE*COUNT) :- 
	node(k,SYSTEM,IRO,ENTITY,ENTITY2), 
	output(SYSTEM,IRO,SCOPE,REP,any), 
	stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,ENTITY2),STEP), 
	metadataOutput(METADATA,SYSTEM,IRO,min,FIX_VALUE,MOD_VALUE),
	VALUE = #min{D,STEP2,PROVIDER,SOURCE,INFO : 
		connectToNode(node(k,SYSTEM,IRO,ENTITY,ENTITY2), stream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP2)),
		heuristic(k,stream,SYSTEM,tnode(k,SOURCE,PROVIDER,_,_),INFO,METADATA,D),
		IRO != PROVIDER, 
		STEP2 < STEP}, 
	nodeMeta(node(k,SYSTEM,IRO,ENTITY,ENTITY2), STEP-1, COUNT),
	COUNT > 0.


%avg
metadataStream(k,METADATA,stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,ENTITY2),STEP),VALUE/COUNT+FIX_VALUE+MOD_VALUE*COUNT) :- 
	node(k,SYSTEM,IRO,ENTITY,ENTITY2), 
	output(SYSTEM,IRO,SCOPE,REP,ENTITY2), 
	ENTITY2 != none,
	ENTITY2 != any,
	stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,ENTITY2),STEP), 
	metadataOutput(METADATA,SYSTEM,IRO,avg,FIX_VALUE,MOD_VALUE),
	VALUE = #sum{D,STEP2,PROVIDER,SOURCE,INFO : 
		connectToNode(node(k,SYSTEM,IRO,ENTITY,ENTITY2), stream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP2)),
		heuristic(k,stream,SYSTEM,tnode(k,SOURCE,PROVIDER,_,_),INFO,METADATA,D),
		IRO != PROVIDER, 
		STEP2 < STEP}, 
	nodeMeta(node(k,SYSTEM,IRO,ENTITY,ENTITY2), STEP-1, COUNT),
	COUNT > 0.

metadataStream(k,METADATA,stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,none),STEP),VALUE/COUNT+FIX_VALUE+MOD_VALUE*COUNT) :- 
	node(k,SYSTEM,IRO,ENTITY,ENTITY2), 
	output(SYSTEM,IRO,SCOPE,REP,none), 
	stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,none),STEP), 
	metadataOutput(METADATA,SYSTEM,IRO,avg,FIX_VALUE,MOD_VALUE),
	VALUE = #sum{D,STEP2,PROVIDER,SOURCE,INFO : 
		connectToNode(node(k,SYSTEM,IRO,ENTITY,ENTITY2), stream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP2)),
		heuristic(k,stream,SYSTEM,tnode(k,SOURCE,PROVIDER,_,_),INFO,METADATA,D),
		IRO != PROVIDER, 
		STEP2 < STEP}, 
	nodeMeta(node(k,SYSTEM,IRO,ENTITY,ENTITY2), STEP-1, COUNT),
	COUNT > 0.

metadataStream(k,METADATA,stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,ENTITY2),STEP),VALUE/COUNT+FIX_VALUE+MOD_VALUE*COUNT) :- 
	node(k,SYSTEM,IRO,ENTITY,ENTITY2), 
	output(SYSTEM,IRO,SCOPE,REP,any), 
	stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,ENTITY2),STEP), 
	metadataOutput(METADATA,SYSTEM,IRO,avg,FIX_VALUE,MOD_VALUE),
	VALUE = #sum{D,STEP2,PROVIDER,SOURCE,INFO : 
		connectToNode(node(k,SYSTEM,IRO,ENTITY,ENTITY2), stream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP2)),
		heuristic(k,stream,SYSTEM,tnode(k,SOURCE,PROVIDER,_,_),INFO,METADATA,D),
		IRO != PROVIDER, 
		STEP2 < STEP}, 
	nodeMeta(node(k,SYSTEM,IRO,ENTITY,ENTITY2), STEP-1, COUNT),
	COUNT > 0.

*%
%max
%*
metadataStream(k,METADATA,stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,ENTITY2),STEP),VALUE+FIX_VALUE+MOD_VALUE*COUNT) :- 
	node(k,SYSTEM,IRO,ENTITY,ENTITY2), 
	output(SYSTEM,IRO,SCOPE,REP,ENTITY2), 
	ENTITY2 != none,
	ENTITY2 != any,
	stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,ENTITY2),STEP), 
	metadataOutput(METADATA,SYSTEM,IRO,max,FIX_VALUE,MOD_VALUE),
	VALUE = #max{D,STEP2,PROVIDER,SOURCE,INFO : 
		connectToNode(node(k,SYSTEM,IRO,ENTITY,ENTITY2), stream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP2)),
		heuristic(k,stream,SYSTEM,tnode(k,SOURCE,PROVIDER,_,_),INFO,METADATA,D),
		IRO != PROVIDER, 
		STEP2 < STEP}, 
	nodeMeta(node(k,SYSTEM,IRO,ENTITY,ENTITY2), STEP-1, COUNT),
	COUNT > 0.

metadataStream(k,METADATA,stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,none),STEP),VALUE+FIX_VALUE+MOD_VALUE*COUNT) :- 
	node(k,SYSTEM,IRO,ENTITY,ENTITY2), 
	output(SYSTEM,IRO,SCOPE,REP,none), 
	stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,none),STEP), 
	metadataOutput(METADATA,SYSTEM,IRO,max,FIX_VALUE,MOD_VALUE),
	VALUE = #max{D,STEP2,PROVIDER,SOURCE,INFO : 
		connectToNode(node(k,SYSTEM,IRO,ENTITY,ENTITY2), stream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP2)),
		heuristic(k,stream,SYSTEM,tnode(k,SOURCE,PROVIDER,_,_),INFO,METADATA,D),
		IRO != PROVIDER, 
		STEP2 < STEP}, 
	nodeMeta(node(k,SYSTEM,IRO,ENTITY,ENTITY2), STEP-1, COUNT),
	COUNT > 0.

metadataStream(k,METADATA,stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,ENTITY2),STEP),VALUE+FIX_VALUE+MOD_VALUE*COUNT) :- 
	node(k,SYSTEM,IRO,ENTITY,ENTITY2), 
	output(SYSTEM,IRO,SCOPE,REP,any), 
	stream(k,SYSTEM,IRO,SYSTEM,information(ENTITY,SCOPE,REP,ENTITY2),STEP), 
	metadataOutput(METADATA,SYSTEM,IRO,max,FIX_VALUE,MOD_VALUE),
	VALUE = #max{D,STEP2,PROVIDER,SOURCE,INFO : 
		connectToNode(node(k,SYSTEM,IRO,ENTITY,ENTITY2), stream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP2)),
		heuristic(k,stream,SYSTEM,tnode(k,SOURCE,PROVIDER,_,_),INFO,METADATA,D),
		IRO != PROVIDER, 
		STEP2 < STEP}, 
	nodeMeta(node(k,SYSTEM,IRO,ENTITY,ENTITY2), STEP-1, COUNT),
	COUNT > 0.*%

% optimizing Stream QoS metadata
%*
#minimize { VALUE@4,INFO,SYSTEM,PROVIDER,SOURCE,STEP : 
		selectedStream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP), 
		heuristic(k,stream,SYSTEM,tnode(k,SYSTEM,PROVIDER,_,_),INFO,METADATA,VALUE), 
		query(k) }.
#maximize { VALUE@4,INFO,SYSTEM,PROVIDER,SOURCE,STEP :
		selectedStream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP),  
		heuristic(k,stream,SYSTEM,tnode(k,SYSTEM,PROVIDER,_,_),INFO,METADATA,VALUE), 
		query(k) }.


#minimize { VALUE@priorityDelay,INFO,SYSTEM,PROVIDER,SOURCE,STEP : 
		metadataStream(k,delay,stream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP),VALUE), 
		query(k) }.
#maximize { VALUE@priorityAccuracy,INFO,SYSTEM,PROVIDER,SOURCE,STEP : 
		metadataStream(k,accuracy,stream(k,SYSTEM,PROVIDER,SOURCE,INFO,STEP),VALUE), 
		query(k) }.
*%
%% ------------------------------------------------------------------------------------------
%*
dominated(k,SYSTEM,TNODE,METADATA,INFO,C1) :- 
	metadata(_,METADATA,maximize),
	heuristic(k,stream,SYSTEM,TNODE,INFO,METADATA,C1),
	heuristic(k,stream,SYSTEM,_,INFO,METADATA,C2),
	C1 < C2.

dominated(k,SYSTEM,TNODE,METADATA,INFO,C1) :- 
	metadata(_,METADATA,minimize),
	heuristic(k,stream,SYSTEM,TNODE,INFO,METADATA,C1),
	heuristic(k,stream,SYSTEM,_,INFO,METADATA,C2),
	C2 < C1.

-dominated(k,SYSTEM,TNODE,METADATA,INFO,C) :- 
	heuristic(k,stream,SYSTEM,TNODE,INFO,METADATA,C),
	not dominated(k,SYSTEM,TNODE,METADATA,INFO,C).
*%

penalty(k,SYSTEM,TNODE,METADATA,INFO,COUNT) :-
	metadata(_,METADATA,maximize),
	COUNT = #count {TNODE2,C2 : heuristic(k,stream,SYSTEM,TNODE2,INFO,METADATA,C2), C2 > C},
	heuristic(k,stream,SYSTEM,TNODE,INFO,METADATA,C).

penalty(k,SYSTEM,TNODE,METADATA,INFO,COUNT) :-
	metadata(_,METADATA,minimize),
	COUNT = #count {TNODE2,C2 : heuristic(k,stream,SYSTEM,TNODE2,INFO,METADATA,C2), C2 < C},
	heuristic(k,stream,SYSTEM,TNODE,INFO,METADATA,C).

p(k,SYSTEM,TNODE2,METADATA,INFO,P) :-
	flagged(k,TNODE,_), 
	before(TNODE,TNODE2,_,_),
	tinput(TNODE2,INFO,MIN,MAX),
	%P >= MAX,
	penalty(k,SYSTEM,TNODE,METADATA,INFO,P).

#minimize { D@3,SYSTEM,TNODE,METADATA,INFO : p(k,SYSTEM,TNODE,METADATA,INFO,D) }.

%*
% see traveling salespersons problem for details
%order(X,C1,C2) :- outcost(X,(C1;C2)), C1 < C2, C <= C1 : outcost(X,C), C < C2.
dominated(k,SYSTEM,METADATA,INFO,C1,C2) :- 
	%metadata(information;stream,METADATA,_),
	heuristic(k,stream,SYSTEM,_,INFO,METADATA,(C1;C2)),
	C1 < C2, 
	C <= C1 : heuristic(k,stream,SYSTEM,_,INFO,METADATA,C), C < C2.

%penalty(X,C1,C2-C1) :- order(X,C1,C2), cycle(X,Y), cost(X,Y,C2).
penalty(k,SYSTEM,METADATA,INFO,C2,C2-C1) :-
	%metadata(information;stream,METADATA,_), 
	order(k,SYSTEM,METADATA,INFO,C1,C2), 
	flagged(k,TNODE,_), tstream(k,SYSTEM,TNODE,INFO),
	heuristic(k,stream,SYSTEM,TNODE,INFO,METADATA,C1).

%penalty(X,C1,C2-C1) :- order(X,C1,C2), penalty(X,C2,_).
penalty(k,SYSTEM,METADATA,INFO,C2,C2-C1) :- 
	order(k,SYSTEM,METADATA,INFO,C1,C2), 
	penalty(k,SYSTEM,METADATA,INFO,C1,_).

% TODO add configurable settings for different metadata
#minimize { D@3,SYSTEM,METADATA,INFO,C : penalty(k,SYSTEM,METADATA,INFO,C,D) }.
*%

%*

%% Computing map QoS metadata
% no input
metadataMap(k,METADATA,map(k,SYSTEM,NODE,SYSTEM,INFO_TYPE,STEP),SUM) :- 
	map(k,SYSTEM,mapNode(k,SYSTEM,NODE,ENTITY_TYPE,ENTITY2),SYSTEM,INFO_TYPE,STEP),
	mapMeta(mapNode(k,SYSTEM,NODE,ENTITY_TYPE,ENTITY2),STEP-1,0),
	heuristic(k,tmap(k,SYSTEM,tmapNode(k,SYSTEM,NODE,ENTITY_TYPE,ENTITY2),INFO_TYPE),METADATA,SUM).

% min
metadataMap(k,METADATA,map(k,SYSTEM,NODE,SOURCE,INFO_TYPE,STEP),FIX_VALUE+VALUE+COUNT*MOD_VALUE) :- 
	map(k,SYSTEM,NODE,SOURCE,INFO_TYPE,STEP), 
	metadataOutput(METADATA,SYSTEM,NODE,min,FIX_VALUE,MOD_VALUE),
	VALUE = #min{D,STEP2,PROVIDER,CONNECTED : 
		connectToMap(mapNode(k,SYSTEM,NODE,ENTITY_TYPE,ENTITY2),CONNECTED,PROVIDER,STEP2),
		metadataElement(k,METADATA,CONNECTED,D), 
		NODE != PROVIDER, 
		STEP2 < STEP}, 
	mapMeta(mapNode(k,SYSTEM,NODE,ENTITY_TYPE,ENTITY2),STEP-1,COUNT),
	COUNT != 0.

% avg
metadataMap(k,METADATA,map(k,SYSTEM,NODE,SOURCE,informationType(ENTITY_TYPE,SCOPE,REP,ENTITY2),STEP),FIX_VALUE+VALUE/COUNT+COUNT*MOD_VALUE) :- 
	map(k,SYSTEM,NODE,SOURCE,informationType(ENTITY_TYPE,SCOPE,REP,ENTITY2),STEP), 
	metadataOutput(METADATA,SYSTEM,NODE,avg,FIX_VALUE,MOD_VALUE),
	VALUE = #sum{D,STEP2,PROVIDER,CONNECTED : 
		connectToMap(mapNode(k,SYSTEM,NODE,ENTITY_TYPE,ENTITY2),CONNECTED,PROVIDER,STEP2),
		metadataElement(k,METADATA,CONNECTED,D), 
		NODE != PROVIDER, 
		STEP2 < STEP}, 
	mapMeta(mapNode(k,SYSTEM,NODE,ENTITY_TYPE,ENTITY2),STEP-1,COUNT),
	COUNT != 0.

% sum
metadataMap(k,METADATA,map(k,SYSTEM,NODE,SOURCE,informationType(ENTITY_TYPE,SCOPE,REP,ENTITY2),STEP),FIX_VALUE+VALUE+COUNT*MOD_VALUE) :- 
	map(k,SYSTEM,NODE,SOURCE,informationType(ENTITY_TYPE,SCOPE,REP,ENTITY2),STEP), 
	metadataOutput(METADATA,SYSTEM,NODE,sum,FIX_VALUE,MOD_VALUE),
	VALUE = #sum{D,STEP2,PROVIDER,CONNECTED : 
		connectToMap(mapNode(k,SYSTEM,NODE,ENTITY_TYPE,ENTITY2),CONNECTED,PROVIDER,STEP2),
		metadataElement(k,METADATA,CONNECTED,D), 
		NODE != PROVIDER, 
		STEP2 < STEP}, 
	mapMeta(mapNode(k,SYSTEM,NODE,ENTITY_TYPE,ENTITY2),STEP-1,COUNT),
	COUNT != 0.


% max
metadataMap(k,METADATA,map(k,SYSTEM,NODE,SOURCE,INFO_TYPE,STEP),FIX_VALUE+VALUE+COUNT*MOD_VALUE) :- 
	map(k,SYSTEM,NODE,SOURCE,INFO_TYPE,STEP), 
	metadataOutput(METADATA,SYSTEM,NODE,max,FIX_VALUE,MOD_VALUE),
	VALUE = #max{D,STEP2,PROVIDER,CONNECTED : 
		connectToMap(mapNode(k,SYSTEM,NODE,ENTITY_TYPE,ENTITY2),CONNECTED,PROVIDER,STEP2),
		metadataElement(k,METADATA,CONNECTED,D), 
		NODE != PROVIDER, 
		STEP2 < STEP}, 
	mapMeta(mapNode(k,SYSTEM,NODE,ENTITY_TYPE,ENTITY2),STEP-1,COUNT),
	COUNT != 0.

*%

