% information/3		:		(entity,scope,representation)
% stream/3		: 		(system,source,information)
% node/3		:		(system,nodeName,entity)
% output/6 		:		(system,node,scope,rep,acc_mode,acc_modifier)
%--------------------------------------------------------------------------------------
% paramters
 #const priorityDelay=3.
 #const priorityAccuracy=3.
 #const priorityTransferCost=2.
 #const priorityCost=1.
 #const maxTransferDelayValue=100.
 #const maxTranslateDelayValue=100.
 #const minAccuracyValue=-100.
 #const maxAccuracyValue=100.
 

%--------------------------------------------------------------------------------------
#program base.
%#show streamTransfer/7.
%#show node/4.
%#show streamDelay/5.
%#show nodeTemplate/2.
%#show stream/4.
%#show transfer/4.
%#show requiredStream/4.
%#show system/2.
%--------------------------------------------------------------------------------------
#program query(k).

#external query(k).

% preprocessing
{ stream(k,SYSTEM,SOURCE,INFO) } :- inputStream(SYSTEM,SOURCE,INFO,_,_,_), query(k).
streamDelay(k,SYSTEM,SOURCE,INFO,DELAY) :- inputStream(SYSTEM,SOURCE,INFO,DELAY,_,_), stream(k,SYSTEM,SOURCE,INFO).
streamAccuracy(k,SYSTEM,SOURCE,INFO,ACCURACY) :- inputStream(SYSTEM,SOURCE,INFO,_,ACCURACY,_), stream(k,SYSTEM,SOURCE,INFO).
streamCost(k,SYSTEM,SOURCE,INFO,COST) :- inputStream(SYSTEM,SOURCE,INFO,_,_,COST), stream(k,SYSTEM,SOURCE,INFO).


%%% guessing

%% creating a node
0 { node(k,SYSTEM,NODE,ENTITY) } 1 :- nodeTemplate(SYSTEM,NODE,ENTITY), entity(ENTITY,_), query(k).
0 { node(k,SYSTEM,NODE,ENTITY) } 1 :- nodeTemplate(SYSTEM,NODE,any), entity(ENTITY,_), query(k).
MIN { connect(k,SYSTEM,NODE,SOURCE,information(ENTITY,SCOPE,REP,none)) : stream(k,SYSTEM,SOURCE,information(ENTITY,SCOPE,REP,none)) } MAX :- 
		input(SYSTEM,NODE,SCOPE,REP,MIN,MAX), node(k,SYSTEM,NODE,ENTITY).

stream(k,SYSTEM,SYSTEM,information(ENTITY,SCOPE,REP,none)) :- node(k,SYSTEM,NODE,ENTITY), output(SYSTEM,NODE,SCOPE,REP).

% computing QoS paramters
streamDelay(k,SYSTEM,SYSTEM,information(ENTITY,SCOPE,REP,none),ND) :- node(k,SYSTEM,NODE,ENTITY), output(SYSTEM,NODE,SCOPE,REP), nodeDelay(SYSTEM,NODE,ND),
		SD = #max{D,SOURCE,INFO : connect(k,SYSTEM,NODE,SOURCE,INFO), streamDelay(k,SYSTEM,SOURCE,INFO,D)}, SD==#infimum.
streamDelay(k,SYSTEM,SYSTEM,information(ENTITY,SCOPE,REP,none),ND+SD) :- node(k,SYSTEM,NODE,ENTITY), output(SYSTEM,NODE,SCOPE,REP), nodeDelay(SYSTEM,NODE,ND),
		SD = #max{D,SOURCE,INFO : connect(k,SYSTEM,NODE,SOURCE,INFO), streamDelay(k,SYSTEM,SOURCE,INFO,D)}, SD!=#infimum.
streamCost(k,SYSTEM,SYSTEM,information(ENTITY,SCOPE,REP,none),0) :- node(k,SYSTEM,NODE,ENTITY), output(SYSTEM,NODE,SCOPE,REP).

streamAccuracy(k,SYSTEM,SYSTEM,information(ENTITY,SCOPE,REP,none),ACC_COUNT*ACC_MODIFIER+ACC) :- node(k,SYSTEM,NODE,ENTITY), output(SYSTEM,NODE,SCOPE,REP), nodeAccuracyMin(SYSTEM,NODE,ACC_MODIFIER), 
		ACC = #min{D,SOURCE,INFO : connect(k,SYSTEM,NODE,SOURCE,INFO), streamAccuracy(k,SYSTEM,SOURCE,INFO,D)}, 
		ACC_COUNT = #count{D,SOURCE,INFO : connect(k,SYSTEM,NODE,SOURCE,INFO), streamAccuracy(k,SYSTEM,SOURCE,INFO,D)},
		ACC_MODIFIER+ACC < maxAccuracyValue, ACC_MODIFIER+ACC > minAccuracyValue.
streamAccuracy(k,SYSTEM,SYSTEM,information(ENTITY,SCOPE,REP,none),ACC_COUNT*ACC_MODIFIER+ACC) :- node(k,SYSTEM,NODE,ENTITY), output(SYSTEM,NODE,SCOPE,REP), nodeAccuracyAvg(SYSTEM,NODE,ACC_MODIFIER), 
		ACC_SUM = #sum{D,SOURCE,INFO : connect(k,SYSTEM,NODE,SOURCE,INFO), streamAccuracy(k,SYSTEM,SOURCE,INFO,D)}, 
		ACC_COUNT = #count{D,SOURCE,INFO : connect(k,SYSTEM,NODE,SOURCE,INFO), streamAccuracy(k,SYSTEM,SOURCE,INFO,D)}, ACC_COUNT != 0,
		ACC = ACC_SUM / ACC_COUNT, ACC_MODIFIER+ACC < maxAccuracyValue, ACC_MODIFIER+ACC > minAccuracyValue.
streamAccuracy(k,SYSTEM,SYSTEM,information(ENTITY,SCOPE,REP,none),0) :- node(k,SYSTEM,NODE,ENTITY), output(SYSTEM,NODE,SCOPE,REP), nodeAccuracyAvg(SYSTEM,NODE,ACC_MODIFIER), 
		ACC_COUNT = #count{D,SOURCE,INFO : connect(k,SYSTEM,NODE,SOURCE,INFO), streamAccuracy(k,SYSTEM,SOURCE,INFO,D)}, ACC_COUNT == 0.
streamAccuracy(k,SYSTEM,SYSTEM,information(ENTITY,SCOPE,REP,none),ACC_COUNT*ACC_MODIFIER+ACC) :- node(k,SYSTEM,NODE,ENTITY), output(SYSTEM,NODE,SCOPE,REP), nodeAccuracyMax(SYSTEM,NODE,ACC_MODIFIER), 
		ACC = #max{D,SOURCE,INFO : connect(k,SYSTEM,NODE,SOURCE,INFO), streamAccuracy(k,SYSTEM,SOURCE,INFO,D)}, ACC!=#infimum, 
		ACC_COUNT = #count{D,SOURCE,INFO : connect(k,SYSTEM,NODE,SOURCE,INFO), streamAccuracy(k,SYSTEM,SOURCE,INFO,D)}, ACC_COUNT != 0,
		ACC_MODIFIER+ACC < maxAccuracyValue, ACC_MODIFIER+ACC > minAccuracyValue.
streamAccuracy(k,SYSTEM,SYSTEM,information(ENTITY,SCOPE,REP,none),0) :- node(k,SYSTEM,NODE,ENTITY), output(SYSTEM,NODE,SCOPE,REP), nodeAccuracyMax(SYSTEM,NODE,ACC_MODIFIER), 
		ACC = #max{D,SOURCE,INFO : connect(k,SYSTEM,NODE,SOURCE,INFO), streamAccuracy(k,SYSTEM,SOURCE,INFO,D)}, ACC==#infimum.

%% OLD
%streamAccuracy(k,SYSTEM,SYSTEM,information(ENTITY,SCOPE,REP,none),ACC_COUNT*ACC_MODIFIER+ACC) :- node(k,SYSTEM,NODE,ENTITY), output(SYSTEM,NODE,SCOPE,REP,min,ACC_MODIFIER), 
%		ACC = #min{D,SOURCE,INFO : connect(k,SYSTEM,NODE,SOURCE,INFO), streamAccuracy(k,SYSTEM,SOURCE,INFO,D)}, 
%		ACC_COUNT = #count{D,SOURCE,INFO : connect(k,SYSTEM,NODE,SOURCE,INFO), streamAccuracy(k,SYSTEM,SOURCE,INFO,D)},
%		ACC_MODIFIER+ACC < maxAccuracyValue, ACC_MODIFIER+ACC > minAccuracyValue.
%streamAccuracy(k,SYSTEM,SYSTEM,information(ENTITY,SCOPE,REP,none),ACC_COUNT*ACC_MODIFIER+ACC) :- node(k,SYSTEM,NODE,ENTITY), output(SYSTEM,NODE,SCOPE,REP,avg,ACC_MODIFIER), 
%		ACC_SUM = #sum{D,SOURCE,INFO : connect(k,SYSTEM,NODE,SOURCE,INFO), streamAccuracy(k,SYSTEM,SOURCE,INFO,D)}, 
%		ACC_COUNT = #count{D,SOURCE,INFO : connect(k,SYSTEM,NODE,SOURCE,INFO), streamAccuracy(k,SYSTEM,SOURCE,INFO,D)}, ACC_COUNT != 0,
%		ACC = ACC_SUM / ACC_COUNT, ACC_MODIFIER+ACC < maxAccuracyValue, ACC_MODIFIER+ACC > minAccuracyValue.
%streamAccuracy(k,SYSTEM,SYSTEM,information(ENTITY,SCOPE,REP,none),0) :- node(k,SYSTEM,NODE,ENTITY), output(SYSTEM,NODE,SCOPE,REP,avg,ACC_MODIFIER), 
%		ACC_COUNT = #count{D,SOURCE,INFO : connect(k,SYSTEM,NODE,SOURCE,INFO), streamAccuracy(k,SYSTEM,SOURCE,INFO,D)}, ACC_COUNT == 0.
%streamAccuracy(k,SYSTEM,SYSTEM,information(ENTITY,SCOPE,REP,none),ACC_COUNT*ACC_MODIFIER+ACC) :- node(k,SYSTEM,NODE,ENTITY), output(SYSTEM,NODE,SCOPE,REP,max,ACC_MODIFIER), 
%		ACC = #max{D,SOURCE,INFO : connect(k,SYSTEM,NODE,SOURCE,INFO), streamAccuracy(k,SYSTEM,SOURCE,INFO,D)}, ACC!=#infimum, 
%		ACC_COUNT = #count{D,SOURCE,INFO : connect(k,SYSTEM,NODE,SOURCE,INFO), streamAccuracy(k,SYSTEM,SOURCE,INFO,D)}, ACC_COUNT != 0,
%		ACC_MODIFIER+ACC < maxAccuracyValue, ACC_MODIFIER+ACC > minAccuracyValue.
%streamAccuracy(k,SYSTEM,SYSTEM,information(ENTITY,SCOPE,REP,none),0) :- node(k,SYSTEM,NODE,ENTITY), output(SYSTEM,NODE,SCOPE,REP,max,ACC_MODIFIER), 
%		ACC = #max{D,SOURCE,INFO : connect(k,SYSTEM,NODE,SOURCE,INFO), streamAccuracy(k,SYSTEM,SOURCE,INFO,D)}, ACC==#infimum.


%% transfer a stream between systems
0 { streamTransfer(k,SYSTEM_SOURCE,SYSTEM_TARGET,SOURCE,INFO,TRANSFER_DELAY,TRANSFER_COST) } 1
		:- transfer(SYSTEM_SOURCE,SYSTEM_TARGET,TRANSFER_DELAY,TRANSFER_COST), stream(k,SYSTEM_SOURCE,SOURCE,INFO), SYSTEM_TARGET != SOURCE.

% computing QoS paramters		
stream(k,SYSTEM_TARGET,SOURCE,INFO) :- streamTransfer(k,SYSTEM_SOURCE,SYSTEM_TARGET,SOURCE,INFO,TRANSFER_DELAY,TRANSFER_COST).
streamDelay(k,SYSTEM_TARGET,SOURCE,INFO,TRANSFER_DELAY+ DELAY) :- streamTransfer(k,SYSTEM_SOURCE,SYSTEM_TARGET,SOURCE,INFO,TRANSFER_DELAY,TRANSFER_COST), 
		streamDelay(k,SYSTEM_SOURCE,SOURCE,INFO,DELAY), TRANSFER_DELAY+DELAY < maxTransferDelayValue.
streamCost(k,SYSTEM_TARGET,SOURCE,INFO,0) :- streamTransfer(k,SYSTEM_SOURCE,SYSTEM_TARGET,SOURCE,INFO,TRANSFER_DELAY,TRANSFER_COST).
streamAccuracy(k,SYSTEM_TARGET,SOURCE,INFO,ACCURACY) :- streamTransfer(k,SYSTEM_SOURCE,SYSTEM_TARGET,SOURCE,INFO,TRANSFER_DELAY,TRANSFER_COST), 
		streamAccuracy(k,SYSTEM_SOURCE,SOURCE,INFO,ACCURACY).


%% translate representation

0 { informationTranslation(k,SYSTEM,IRO,ENTITY,SCOPE,none,none) } 1 :- iro(SYSTEM,IRO,any,SCOPE), entity(ENTITY,ENTITY_TYPE), hasScope(ENTITY_TYPE,SCOPE), query(k).
0 { informationTranslation(k,SYSTEM,IRO,ENTITY,SCOPE,none,none) } 1 :- iro(SYSTEM,IRO,ENTITY_TYPE,SCOPE), entity(ENTITY,ENTITY_TYPE), hasScope(ENTITY_TYPE,SCOPE), query(k).
0 { informationTranslation(k,SYSTEM,IRO,ENTITY,SCOPE,ENTITY2,SCOPE2) } 1 :- iro(SYSTEM,IRO,any,SCOPE,any,SCOPE2), entity(ENTITY,ENTITY_TYPE), hasScope(ENTITY_TYPE,SCOPE), 
		entity(ENTITY2,ENTITY_TYPE2), hasScope(ENTITY_TYPE2,SCOPE2), query(k).
0 { informationTranslation(k,SYSTEM,IRO,ENTITY,SCOPE,ENTITY2,SCOPE2) } 1 :- iro(SYSTEM,IRO,ENTITY_TYPE,SCOPE,ENTITY_TYPE2,SCOPE2), entity(ENTITY,ENTITY_TYPE), hasScope(ENTITY_TYPE,SCOPE), 
		entity(ENTITY2,ENTITY_TYPE2), hasScope(ENTITY_TYPE2,SCOPE2), query(k).

%MIN { connectToIro(k,SYSTEM,IRO,SOURCE,information(ENTITY,SCOPE,REP,none)) : stream(k,SYSTEM,SOURCE,information(ENTITY,SCOPE,REP,none)) } MAX :- 
%		inputIro(SYSTEM,IRO,SCOPE,REP,MIN,MAX), informationTranslation(k,SYSTEM,IRO,ENTITY,SCOPE,_,_).
MIN { connectToIro(k,SYSTEM,IRO,SOURCE,information(ENTITY,SCOPE,REP,none)) : stream(k,SYSTEM,SOURCE,information(ENTITY,SCOPE,REP,none)) } MAX :- 
		inputIro(SYSTEM,IRO,SCOPE,REP,MIN,MAX), informationTranslation(k,SYSTEM,IRO,ENTITY,SCOPE,_,_).
MIN { connectToIro(k,SYSTEM,IRO,SOURCE,information(ENTITY,SCOPE,REP,none)) : stream(k,SYSTEM,SOURCE,information(ENTITY,SCOPE,REP,none)) } MAX :- 
		inputIro2(SYSTEM,IRO,SCOPE,REP,MIN,MAX), informationTranslation(k,SYSTEM,IRO,_,_,ENTITY,SCOPE).

outputIro(SYSTEM,IRO,SCOPE,REP) :- informationTranslation(k,SYSTEM,IRO,ENTITY,SCOPE,_,_), outputIro(SYSTEM,IRO,REP).

%stream(k,SYSTEM,SYSTEM,information(ENTITY,SCOPE,REP,ENTITY2)) :- informationTranslation(k,SYSTEM,IRO,ENTITY,SCOPE,ENTITY2,_), outputIro(SYSTEM,IRO,REP).
stream(k,SYSTEM,SYSTEM,information(ENTITY,SCOPE2,REP,ENTITY2)) :- informationTranslation(k,SYSTEM,IRO,ENTITY,SCOPE,ENTITY2,_), outputIro(SYSTEM,IRO,SCOPE2,REP).

% computing QoS paramters

%streamDelay(k,SYSTEM,SYSTEM,information(ENTITY,SCOPE,REP,ENTITY2),ND) :- informationTranslation(k,SYSTEM,IRO,ENTITY,SCOPE,ENTITY2,_), outputIro(SYSTEM,IRO,REP), 
%		iroDelay(SYSTEM,IRO,ND), SD = #max{D,SOURCE,INFO : connectToIro(k,SYSTEM,IRO,SOURCE,INFO), streamDelay(k,SYSTEM,SOURCE,INFO,D)}, SD==#infimum.
%streamDelay(k,SYSTEM,SYSTEM,information(ENTITY,SCOPE,REP,ENTITY2),ND+SD) :- informationTranslation(k,SYSTEM,IRO,ENTITY,SCOPE,ENTITY2,_), outputIro(SYSTEM,IRO,REP), 
%		iroDelay(SYSTEM,IRO,ND), SD = #max{D,SOURCE,INFO : connectToIro(k,SYSTEM,IRO,SOURCE,INFO), streamDelay(k,SYSTEM,SOURCE,INFO,D)}, SD!=#infimum.
streamDelay(k,SYSTEM,SYSTEM,information(ENTITY,SCOPE2,REP,ENTITY2),ND) :- informationTranslation(k,SYSTEM,IRO,ENTITY,SCOPE,ENTITY2,_), outputIro(SYSTEM,IRO,SCOPE2,REP), 
		iroDelay(SYSTEM,IRO,ND), SD = #max{D,SOURCE,INFO : connectToIro(k,SYSTEM,IRO,SOURCE,INFO), streamDelay(k,SYSTEM,SOURCE,INFO,D)}, SD==#infimum.
streamDelay(k,SYSTEM,SYSTEM,information(ENTITY,SCOPE2,REP,ENTITY2),ND+SD) :- informationTranslation(k,SYSTEM,IRO,ENTITY,SCOPE,ENTITY2,_), outputIro(SYSTEM,IRO,SCOPE2,REP), 
		iroDelay(SYSTEM,IRO,ND), SD = #max{D,SOURCE,INFO : connectToIro(k,SYSTEM,IRO,SOURCE,INFO), streamDelay(k,SYSTEM,SOURCE,INFO,D)}, SD!=#infimum.

streamAccuracy(k,SYSTEM,SYSTEM,information(ENTITY,SCOPE2,REP,ENTITY2),ACC_COUNT*ACC_MODIFIER+ACC) :- informationTranslation(k,SYSTEM,IRO,ENTITY,SCOPE,ENTITY2,_), outputIro(SYSTEM,IRO,SCOPE2,REP), 
		iroAccuracyMin(SYSTEM,IRO,ACC_MODIFIER), ACC = #min{D,SOURCE,INFO : connectToIro(k,SYSTEM,IRO,SOURCE,INFO), streamAccuracy(k,SYSTEM,SOURCE,INFO,D)}, 
		ACC_COUNT = #count{D,SOURCE,INFO : connectToIro(k,SYSTEM,IRO,SOURCE,INFO), streamAccuracy(k,SYSTEM,SOURCE,INFO,D)},
		ACC_MODIFIER+ACC < maxAccuracyValue, ACC_MODIFIER+ACC > minAccuracyValue.
streamAccuracy(k,SYSTEM,SYSTEM,information(ENTITY,SCOPE2,REP,ENTITY2),ACC_COUNT*ACC_MODIFIER+ACC) :- informationTranslation(k,SYSTEM,IRO,ENTITY,SCOPE,ENTITY2,_), outputIro(SYSTEM,IRO,SCOPE2,REP), 
		iroAccuracyAvg(SYSTEM,IRO,ACC_MODIFIER), ACC_SUM = #sum{D,SOURCE,INFO : connectToIro(k,SYSTEM,IRO,SOURCE,INFO), streamAccuracy(k,SYSTEM,SOURCE,INFO,D)}, 
		ACC_COUNT = #count{D,SOURCE,INFO : connectToIro(k,SYSTEM,IRO,SOURCE,INFO), streamAccuracy(k,SYSTEM,SOURCE,INFO,D)}, ACC_COUNT != 0,
		ACC = ACC_SUM / ACC_COUNT, ACC_MODIFIER+ACC < maxAccuracyValue, ACC_MODIFIER+ACC > minAccuracyValue.
streamAccuracy(k,SYSTEM,SYSTEM,information(ENTITY,SCOPE2,REP,ENTITY2),0) :- informationTranslation(k,SYSTEM,IRO,ENTITY,SCOPE,ENTITY2,_), outputIro(SYSTEM,IRO,SCOPE2,REP), 
		iroAccuracyAvg(SYSTEM,IRO,ACC_MODIFIER), ACC_COUNT = #count{D,SOURCE,INFO : connectToIro(k,SYSTEM,IRO,SOURCE,INFO), streamAccuracy(k,SYSTEM,SOURCE,INFO,D)}, 
		ACC_COUNT == 0.
streamAccuracy(k,SYSTEM,SYSTEM,information(ENTITY,SCOPE2,REP,ENTITY2),ACC_COUNT*ACC_MODIFIER+ACC) :- informationTranslation(k,SYSTEM,IRO,ENTITY,SCOPE,ENTITY2,_), outputIro(SYSTEM,IRO,SCOPE2,REP), 
		iroAccuracyMax(SYSTEM,IRO,ACC_MODIFIER), ACC = #max{D,SOURCE,INFO : connectToIro(k,SYSTEM,IRO,SOURCE,INFO), streamAccuracy(k,SYSTEM,SOURCE,INFO,D)}, ACC!=#infimum, 
		ACC_COUNT = #count{D,SOURCE,INFO : connectToIro(k,SYSTEM,IRO,SOURCE,INFO), streamAccuracy(k,SYSTEM,SOURCE,INFO,D)}, ACC_COUNT != 0,
		ACC_MODIFIER+ACC < maxAccuracyValue, ACC_MODIFIER+ACC > minAccuracyValue.
streamAccuracy(k,SYSTEM,SYSTEM,information(ENTITY,SCOPE2,REP,ENTITY2),0) :- informationTranslation(k,SYSTEM,IRO,ENTITY,SCOPE,ENTITY2,_), outputIro(SYSTEM,IRO,SCOPE2,REP), 
		iroAccuracyMax(SYSTEM,IRO,ACC_MODIFIER), ACC = #max{D,SOURCE,INFO : connectToIro(k,SYSTEM,IRO,SOURCE,INFO), streamAccuracy(k,SYSTEM,SOURCE,INFO,D)}, ACC==#infimum.

%streamCost(k,SYSTEM,SYSTEM,information(ENTITY,SCOPE,REP,ENTITY2),0) :- informationTranslation(k,SYSTEM,IRO,ENTITY,SCOPE,ENTITY2,_), outputIro(SYSTEM,IRO,REP).
streamCost(k,SYSTEM,SYSTEM,information(ENTITY,SCOPE2,REP,ENTITY2),0) :- informationTranslation(k,SYSTEM,IRO,ENTITY,SCOPE,ENTITY2,_), outputIro(SYSTEM,IRO,SCOPE2,REP).



%% extract from representation
0 { informationExtrection(k,SYSTEM,SOURCE,SCOPE,REP1,information(ENTITY,SUB_SCOPE,REP2,none)) } 1 :- 
		stream(k,SYSTEM,SOURCE,information(ENTITY,SCOPE,REP1,none)), hasDimension(REP1,SUB_SCOPE,_,_), hasRepresentation(SUB_SCOPE,REP2), query(k).
stream(k,SYSTEM,SOURCE,INFO) :- informationExtrection(k,SYSTEM,SOURCE,SCOPE,REP1,INFO).

% computing QoS paramters	
streamDelay(k,SYSTEM,SOURCE,information(ENTITY,SUB_SCOPE,REP2,ENTITY2),DELAY) :- informationExtrection(k,SYSTEM,SOURCE,SCOPE,REP1,information(ENTITY,SUB_SCOPE,REP2,none)),
		streamDelay(k,SYSTEM_SOURCE,SOURCE,information(ENTITY,SCOPE,REP1,none),DELAY).
streamCost(k,SYSTEM,SOURCE,INFO,0) :- informationExtrection(k,SYSTEM,SOURCE,SCOPE,REP1,INFO).
streamAccuracy(k,SYSTEM,SOURCE,information(ENTITY,SUB_SCOPE,REP2,none),ACCURACY) :- informationExtrection(k,SYSTEM,SOURCE,SCOPE,REP1,information(ENTITY,SUB_SCOPE,REP2,none)),
		streamAccuracy(k,SYSTEM_SOURCE,SOURCE,information(ENTITY,SCOPE,REP1,none),ACCURACY).


% checking consistency of ontology
%:- hasRepresentation(X,_), not scope(X), not valueScope(X).
%:- hasRepresentation(_,Y), not representation(Y).
%:- hasValueScope(X,_,_,_), not representation(X).
%:- hasValueScope(_,Y,_,_), not valueScope(Y).
%:- hasScope(X,_), not entityType(X).
%:- hasScope(_,Y), not scope(Y).
%:- hasUnit(X,_), not valueScope(X).
%:- hasUnit(_,Y), not unit(Y).
%:- interRepresentationOperation(X,_), not representation(X).
%:- interRepresentationOperation(_,Y), not representation(Y).

%:- entity(_,Y), not entityType(Y).
%:- information(X,_,_), not entity(X,_).
%:- information(X,Y,_), not scope(X,Y), not valueScope(Y).
%:- information(_,Y,Z), not hasRepresentation(Y,Z).

% checking
% soft optimization contraint instead of a hard constraint in order to enable partial solitions
:~ requiredStream(SYSTEM,INFO,DELAY,ACCURACY), not stream(k,SYSTEM,_,INFO), query(k). [1@5,requiredStream]
% checking QoS parameters of the required streams
:~ requiredStream(SYSTEM,INFO,REQUIRED_DELAY,REQUIRED_ACCURACY), stream(k,SYSTEM,SOURCE,INFO), streamDelay(k,SYSTEM,SOURCE,INFO,DELAY), streamAccuracy(k,SYSTEM,SOURCE,INFO,ACCURACY), 
		REQUIRED_ACCURACY < ACCURACY, REQUIRED_DELAY > DELAY, query(k). [1@4,requiredStream]


% checking required streams
:~ requiredStreams(SYSTEM,ENTITY_TYPE,SCOPE,REP,REQ_DELAY,REQ_ACCURACY,MIN,MAX), 
		COUNT = #count{ENTITY,SCOPE,REP : stream(k,SYSTEM,SOURCE,information(ENTITY,SCOPE,REP,ENTITY2)), entity(ENTITY,ENTITY_TYPE), 
		streamDelay(k,SYSTEM,SOURCE,information(ENTITY,SCOPE,REP,ENTITY2),DELAY), streamAccuracy(k,SYSTEM,SOURCE,information(ENTITY,SCOPE,REP,ENTITY2),ACCURACY), 
		DELAY < REQ_DELAY, ACCURACY > REQ_ACCURACY }, COUNT < MIN, query(k).[1@5,requiredStream]
:~ requiredStreams(SYSTEM,ENTITY_TYPE,SCOPE,REP,REQ_DELAY,REQ_ACCURACY,MIN,MAX), 
		COUNT = #count{ENTITY,SCOPE,REP : stream(k,SYSTEM,SOURCE,information(ENTITY,SCOPE,REP,ENTITY2)), entity(ENTITY,ENTITY_TYPE), 
		streamDelay(k,SYSTEM,SOURCE,information(ENTITY,SCOPE,REP,ENTITY2),DELAY), streamAccuracy(k,SYSTEM,SOURCE,information(ENTITY,SCOPE,REP,ENTITY2),ACCURACY), 
		DELAY < REQ_DELAY, ACCURACY > REQ_ACCURACY }, COUNT > MAX, query(k).[1@5,requiredStream]


% checking point budget of the systems
:- system(SYSTEM,POINTS), SUM_STREAMS = #sum{COST,SYSTEM_SOURCE,SYSTEM_TARGET,SOURCE,INFO : streamTransfer(k,SYSTEM_SOURCE,SYSTEM_TARGET,SOURCE,INFO,_,COST)}, 
		SUM_NODES = #sum{COST,SYSTEM,NODE,ENTITY : node(k,SYSTEM,NODE,ENTITY), nodeCost(SYSTEM,NODE,COST)}, (SUM_NODES + SUM_STREAMS) > POINTS, query(k).

% optimize
#minimize{ TRANSFER_COST@priorityTransferCost,SYSTEM_SOURCE,SYSTEM_TARGET,SOURCE,INFO : streamTransfer(k,SYSTEM_SOURCE,SYSTEM_TARGET,SOURCE,INFO,_,TRANSFER_COST), query(k) }.
#minimize { DELAY@priorityDelay,SYSTEM,SOURCE,INFO : requiredStream(SYSTEM,INFO,_,_), streamDelay(k,SYSTEM,SOURCE,INFO,DELAY), query(k) }.
%#maximize accuracy
sumCost(k,SUM_NODES + SUM_STREAMS + SUM_TRANSLATIONS + SUM_EXTRACTIONS) :- 
		SUM_STREAMS = #sum{COST,SYSTEM,SOURCE,INFO : streamCost(k,SYSTEM,SOURCE,INFO,COST)}, 
		SUM_NODES = #sum{COST,SYSTEM,NODE,ENTITY : node(k,SYSTEM,NODE,ENTITY), nodeCost(SYSTEM,NODE,COST)}, 
		SUM_TRANSLATIONS = #sum{COST,SYSTEM,IRO,ENTITY,SCOPE : informationTranslation(k,SYSTEM,IRO,ENTITY,SCOPE), iroCost(SYSTEM,IRO,COST)},
		SUM_EXTRACTIONS = #count{SYSTEM,SOURCE,SCOPE,REP1,INFO :  informationExtrection(k,SYSTEM,SOURCE,SCOPE,REP1,INFO)}, query(k).
#minimize { COST@priorityCost : sumCost(k,COST), query(k) }.


%--------------------------------------------------------------------------------------
#program entity(entity,entityType).

entity(entity,entityType).


%--------------------------------------------------------------------------------------
#program inputStream(system,source,information,delay,accuracy,cost).

#external inputStream(system,source,information,delay,accuracy,cost).


%--------------------------------------------------------------------------------------
#program requiredStream(system,information,delay,accuracy).

#external requiredStream(system,information,delay,accuracy).


%--------------------------------------------------------------------------------------
#program requiredStreams(system,entity_type,scope,representation,delay,accuracy,min,max).

#external requiredStreams(system,entity_type,scope,representation,delay,accuracy,min,max).


%--------------------------------------------------------------------------------------
#program system(name,points).

#external system(name,points).


%--------------------------------------------------------------------------------------
#program transfer(system1,system2,delay,cost).

#external transfer(system1,system2,delay,cost).
transfer(system2,system1,delay,cost) :- transfer(system1,system2,delay,cost).









